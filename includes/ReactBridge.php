<?php
namespace Shoplic\WPBridgeReact;

use Exception;

const SHOPLIC_WP_BRIDGE_REACT_VITE_CLIENT_SCRIPT_HANDLE = SHOPLIC_WP_BRIDGE_REACT . '-vite-client-script';
const SHOPLIC_WP_BRIDGE_REACT_LOCALHOST_URL = 'http://localhost:5173';

/**
 * A bridge class for using Vite and React in WordPress.
 */
class ReactBridge {
    /**
     * Singleton instance
     * @var ReactBridge|null
     */
    private static ?ReactBridge $instance = null;

    /**
     * Path to the manifest file generated by Vite
     * @var string
     */
    public string $manifestPath = '';

    /**
     * URL of the Vite (yarn start) local server
     * @var string
     */
    public string $localhostUrl = '';

    /**
     * URL path of the files built by Vite.
     * Used in enqueue_script
     * @var string
     */
    public string $distUrl = '';

    /**
     * List of registered handlers
     * Mainly used after enqueue_script to give 'type' to <script ... />
     * @var array
     */
    public array $handles = [];

    /**
     * Loaded manifest
     * @var array
     */
    public array $manifest = [];

    /**
     * Returns the singleton instance.
     *
     * @param string $absoluteDistPath Absolute path to the built assets
     * @param string $localhostUrl URL of the local server
     * @return ReactBridge instance
     */
    static public function getInstance(): ReactBridge
    {
        if (is_null(self::$instance)) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    /**
     * Constructor of ReactBridge.
     *
     * @param string $absoluteDistPath Absolute path to the directory containing built files
     * @param string $localhostUrl URL of the local server
     */
    public function __construct()
    {
        if (!is_null(self::$instance)) {
            return self::$instance;
        }
        
        // Because of the script, you can't call init here directly, it needs to be registered with a hook
        add_action( 'init', [$this, 'init'] );
    }

    /**
     * Initialization method. Loads appropriate assets depending on the development or production environment.
     */
    public function init(): void
    {
        isDevEnv() ? $this->initDev() : $this->initProd();

        // Regardless of dev or prod mode, this filter is to change the script tag's type to module.
        add_filter('script_loader_tag', [$this, 'filterChangeType'], 999, 3);
    }

    /**
     * Loads assets to be used in a development environment.
     */
    public function initDev(): void
    {
        $this->loadViteDevAssets();
    }

    /**
     * Loads assets to be used in a production environment.
     */
    public function initProd(): void
    {
        try {
            $this->manifest = $this->loadManifest() ?? [];
        } catch (Exception $e) {
            if (defined('WP_DEBUG') && WP_DEBUG) {
                error_log($e->getMessage());
            }
        }
    }

    /**
     * Registers a shortcode in WordPress.
     *
     * @param array $args Array of settings related to the shortcode
     * @return ReactBridge Instance for chaining
     */
    public function addShortcode($args = []): ReactBridge
    {
        // absolute path
        $absoluteDistPath = $args['absolute_dist_path'];
        if (!$absoluteDistPath) {
            throw new Exception("'absolute_dist_path' is not specified.");
        }
        $absoluteDistPath = rtrim($absoluteDistPath, '/');

        // localhost url
        $localhostUrl = isset($args['localhost_url']) ? $args['localhost_url'] : SHOPLIC_WP_BRIDGE_REACT_LOCALHOST_URL;
        if (!$localhostUrl) {
            throw new Exception("'localhost_url' is not specified.");
        }
        $this->localhostUrl = rtrim($localhostUrl, '/');        

        // disturl
        $this->distUrl = absolutePathToUrl($absoluteDistPath);

        // manifest path
        $this->manifestPath = $absoluteDistPath . '/.vite/manifest.json'; // this is for vite5

        $shortcode_name = $args['shortcode_name'];
        $props = $args['props'];
        $entry_file_name = $args['entry_file_name'];

        if (shortcode_exists($shortcode_name)) {
            throw new Exception("Shortcode - '{$shortcode_name}' already exists.");
        }

        // props should have root_id
        $root_id = $props['root_id'];
        if (!$root_id) {
            throw new Exception("'root_id' is not specified.");
        }

        $self = $this;

        add_shortcode($shortcode_name, function($attrs = []) use ($self, $shortcode_name, $props, $root_id, $entry_file_name) {
            // insert all $attrs into $props
            if (is_array($attrs)) {
                $props = array_merge($props, $attrs);
            }
            $entry_handle = fileNameToHandle($entry_file_name);

            // At this point, when the shortcode is used, enqueue the script based on the entry_file_name of the shortcode.
            if (isDevEnv()) {
                $self->enqueueDevAssets($entry_file_name, $entry_handle);
            } else {
                $deps = $props['dependency_scripts'] ?? [];
                $self->enqueueProductionAssets($entry_file_name, $entry_handle, $deps);
            }

            $object_name = isset($props['object_name']) ? $props['object_name'] : $entry_handle . '_props';
            wp_localize_script($entry_handle, $object_name, $props);

            return $self->render($root_id);
        });

        return $this;
    }

    /**
     * Renders a container with the specified root_id.
     *
     * @param string $root_id ID of the root component to render
     * @return string Rendered HTML string
     */
    public function render($root_id): string
    {
        ob_start(); ?>

        <div id="<?php echo $root_id; ?>" data-wp-bridge-react-component-root="true">
            <noscript>You need a browser capable of running JavaScript.</noscript>
            <?php if (isDevEnv()): ?>
                <p>
                    Currently operating in development mode. Did you forget to
                    run <code style="background-color: #e0e0ee; border-radius: 4px; padding: 4px 8px;">yarn run dev</code>?
                </p>
            <?php endif ?>
        </div>

        <?php
        return ob_get_clean();
    }

    /**
     * Loads production environment assets.
     *
     * @param string $entry_file_name Name of the entry file (including the relative path after src)
     * @param string $entry_handle Handle name to be used in WordPress
     * @param array $dependencyScripts Array of dependency scripts
     * @param array $dependencyStyles Array of dependency styles
     */
    public function enqueueProductionAssets(string $entry_file_name, string $entry_handle, array $dependencyScripts = [], array $dependencyStyles = []): void
    {   
        if (!isset($this->handles[$entry_handle])) {
            $this->handles[$entry_handle] = true;

            $key = "src/{$entry_file_name}";
            
            $isEntry = $this->manifest[$key]->isEntry;
            if (!$isEntry) return; // There's no need to enqueue resources that are not entries.

            $file = $this->manifest[$key]->file;
            $imports = $this->manifest[$key]->imports ?? [];
            $cssItems = $this->manifest[$key]->css ?? [];

            if (empty($file)) {
                // @TODO throw error
                return;
            }

            $entry_path = $this->distUrl . '/' . $file;
            wp_enqueue_script($entry_handle, $entry_path, $dependencyScripts, null, true);
            
            // enqueue imported js
            foreach ($imports as $import) {
                $import_handle = fileNameToHandle($import);
                if (!isset($this->handles[$import_handle])) {
                    $this->handles[$import_handle] = true;
                    $importPathUrl = $this->distUrl . '/' . $this->manifest[$import]->file;
                    wp_enqueue_script($import_handle, $importPathUrl, $dependencyScripts, null, true);
                }
            }

            // enqueue imported css
            foreach ($cssItems as $cssItem) {
                $css_handle = fileNameToHandle($cssItem);
                wp_enqueue_style($css_handle, $this->distUrl . '/' . $cssItem, $dependencyStyles, null);
            }
        }
    }

    /**
     * Loads files(js) to be used in a development environment
     *
     * @param string $entry_file_name Name of the entry file
     * @param string $handle Handle name to be used in WordPress
     * @param array $deps Dependency array
     */
    public function enqueueDevAssets(string $entry_file_name, string $handle, array $deps = []): void
    {
        if (!isset($this->handles[$handle])) {
            $this->handles[$handle] = true;

            $path = $this->localhostUrl . "/src/$entry_file_name";
            
            wp_enqueue_script(
                $handle,
                $path,
                array_merge(
                    [
                        'wp-i18n',
                        SHOPLIC_WP_BRIDGE_REACT_VITE_CLIENT_SCRIPT_HANDLE
                    ],
                    $deps
                ),
                null,
                ['in_footer' => true]
            );

            wp_add_inline_script(
                $handle,
                "console.info('$entry_file_name is running in development mode.')"
            );
        }
    }

    /**
     * Loads the manifest file.
     *
     * @return array|null Content of the manifest file
     */
    public function loadManifest(): array
    {
        $manifest = null;
        $filePath = $this->manifestPath;

        if (is_file($filePath) && is_readable($filePath)) {
            $manifest = (array) wp_json_file_decode($filePath, true) ?? [];
        } else {
            throw new Exception( esc_html( sprintf( '[Vite] No manifest found in %s.', $filePath ) ) );
        }        

        return $manifest;
    }

    /**
     * Registers the Vite client script in WordPress.
     */
    public function loadViteDevAssets(): void
    {
        $this->registerViteClientScript();
        $this->injectReactRefreshScript();
    }

    /**
     * Registers the Vite client script in WordPress.
     */
    public function registerViteClientScript(): void
    {
        $handle = SHOPLIC_WP_BRIDGE_REACT_VITE_CLIENT_SCRIPT_HANDLE;
        if (!isset($this->handles[$handle])) {
            $this->handles[$handle] = true;

            $src = $this->localhostUrl . '/@vite/client';
            $deps = array();
            $ver = '1.0.0';
            $in_footer = true;
            wp_register_script( $handle, $src, $deps, $ver, $in_footer );
        }
    }

    /**
     * Injects the React Fast Refresh script into the page.
     */
    public function injectReactRefreshScript(): void
    {
        $handle = SHOPLIC_WP_BRIDGE_REACT_VITE_CLIENT_SCRIPT_HANDLE;

        $refreshScript = $this->getReactRefreshScript();
        wp_add_inline_script($handle, $refreshScript, 'before'); // Important: it causes errors if set to 'after'

        // @TODO: Even though a filter has already been applied elsewhere to add 'module', it seems a bit different for inline_script?
        // Do we really need to do this again?
        add_filter(
            'wp_inline_script_attributes',
            function ( array $attributes ) use ( $handle ): array {
                if ( isset( $attributes['id'] ) && $attributes['id'] === $handle . "-js-before" ) {
                    $attributes['type'] = 'module';
                }
                return $attributes;
            }
        );
    }

    /**
     * Returns the content of the React Fast Refresh script.
     *
     * @return string React Fast Refresh script
     */
    public function getReactRefreshScript(): string
    {
        // Start output buffering
        ob_start();
    
        // Output the script using variables
        // refer: https://vitejs.dev/guide/backend-integration.html
        echo "import RefreshRuntime from '{$this->localhostUrl}/@react-refresh';";
        echo "RefreshRuntime.injectIntoGlobalHook(window);";
        echo "window.RefreshReg = () => {};";
        echo "window.RefreshSig = () => (type) => type;";
        echo "window.__vite_plugin_react_preamble_installed__ = true;";
    
        return ob_get_clean();
    }

    /**
     * Changes the type attribute of the script tag to module.
     *
     * @param string $tag HTML string of the script tag to process
     * @param string $handle Handle name of the script
     * @return string Modified HTML string of the script tag
     */
    public function filterChangeType(string $tag, string $handle): string
    {   
        if (isset($this->handles[$handle])) {
            // <script> tag can be found more than once if wp_add_inline_script() is called.
            $lastPos = 0;
            $scripts = [];

            do {
                $pos = strpos($tag, '<script ', $lastPos + 1);
                if ($pos > $lastPos) {
                    $scripts[] = trim(substr($tag, $lastPos, $pos - $lastPos));
                    $lastPos   = $pos;
                }
            } while ($pos !== false);

            $rest = trim(substr($tag, $lastPos));
            if (str_starts_with($rest, '<script')) {
                $scripts[] = trim($rest);
                $rest      = '';
            }

            foreach ($scripts as &$script) {
                if (str_starts_with($script, '<script ')) {
                    $attrs = substr($script, 6, strpos($script, '>') - 6);
                    if (!str_contains($attrs, 'src=')) {
                        continue;
                    }

                    $replace = '<script ';
                    $type    = false;

                    preg_match_all(
                        '/(\w+)=["\']?((?:.(?!["\']?\s+\S+=|\s*\/?[>"\']))+.)["\']?/',
                        $attrs,
                        $matches,
                        PREG_SET_ORDER
                    );

                    foreach ($matches as $match) {
                        if ('type' === $match[1]) {
                            $replace .= " type='module'";
                            $type    = true;
                        } else {
                            $replace .= " $match[0]";
                        }
                    }

                    if (!$type) {
                        $replace .= " type='module'";
                    }

                    $replace .= '></script>' . PHP_EOL;

                    $script = $replace;
                }
            }

            $tag = implode(PHP_EOL, $scripts) . $rest . PHP_EOL;
        }

        return $tag;
    }
}